# Phishing Email Detector

## Objective
Develop a Python-based program to identify and flag potential phishing emails based on specific characteristics, such as suspicious links, phishing keywords, and mismatched sender domains.

---

## Key Features
- **Analyze Email Content**: Accept email content as text input or a file.
- **Suspicious Links Detection**: Identify potentially malicious links in the email.
- **Keyword Analysis**: Detect common phishing keywords like "urgent," "click here," or "free."
- **Phishing Classification**: Use a Naive Bayes classifier to classify emails as phishing or non-phishing.
- **Phishing Likelihood Score**: Provide a probability score for phishing likelihood.

---

## Technologies Used
- **Programming Language**: Python
- **Libraries**:
  - `re` (for regular expressions to analyze content)
  - `scikit-learn` (for NLP-based classification)
  - `joblib` (to save and load the trained model)

---

## How to Run the Project

### Prerequisites
1. Install Python (v3.7 or higher).
2. Install required libraries using:
   ```bash
   pip install scikit-learn joblib
   ```

### Steps to Run
1. Clone this repository:
   
   Clone the repository using the link
   
2. Navigate to the project directory:
   ```bash
   cd phishing-email-detector
   ```
3. Run the script:
   ```bash
   python phishing_detector.py
   ```
4. Modify the `email_content` variable in the script to test different email texts.

---

## Example Output
For an email content like:
```
Your account is at risk. Click here to secure it now: http://phishing-site.com
```
The output might be:
```
Model Accuracy: 100.00%
Phishing Analysis Report:
- Suspicious Links: ['http://phishing-site.com']
- Phishing Keywords: ['click here', 'secure']
- Is Phishing: Yes
- Phishing Probability: 98.50%
```

---

## File Structure
- **phishing_detector.py**: Main script to train the model and analyze emails.
- **README.md**: Project documentation.

---

## Use Cases
1. **Personal Use**: Prevent falling victim to phishing scams.
2. **Enterprise Security**: Automate the detection of phishing emails for organizations.
3. **Educational Tool**: Demonstrate phishing detection methods and train users.

---

## Future Improvements
1. Use larger datasets for training to improve accuracy.
2. Integrate advanced NLP models like **spaCy** or **transformers** for enhanced phishing detection.
3. Deploy the detector as a web app using **Flask** or **FastAPI**.
4. Add a feature to analyze email headers for mismatched sender domains.

---

## Contributions
Contributions are welcome! Feel free to submit a pull request or open an issue for discussion.

---

## License
This project is licensed under the MIT License. See the LICENSE file for more details.

